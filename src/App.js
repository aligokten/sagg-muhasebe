import React, { useState, useEffect, useMemo, useRef, forwardRef } from 'react';
import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';
import { LayoutDashboard, Receipt, ShoppingCart, BarChart3, Settings, PlusCircle, X, Users, Package, Landmark, Printer, Eye, Edit, Send, MoreVertical } from 'lucide-react';

// Firebase Imports
import { initializeApp } from 'firebase/app';
import { getAuth, signInAnonymously, onAuthStateChanged, signInWithCustomToken } from 'firebase/auth';
import { getFirestore, collection, addDoc, onSnapshot, doc, query, Timestamp, setDoc, updateDoc } from 'firebase/firestore';

// Your web app's Firebase configuration
// For Firebase JS SDK v7.20.0 and later, measurementId is optional
const firebaseConfig = {
  apiKey: "AIzaSyB3UzsOhB0u8kvha-kPioQX6YYRrOhEAvk",
  authDomain: "sagg-muhasebe.firebaseapp.com",
  projectId: "sagg-muhasebe",
  storageBucket: "sagg-muhasebe.firebasestorage.app",
  messagingSenderId: "453864948612",
  appId: "1:453864948612:web:5736e59e08a10d524353d1",
  measurementId: "G-PM7WXNEQG9"
};

// Initialize Firebase
const app = initializeApp(firebaseConfig);
const analytics = getAnalytics(app);
const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-sagg-muhasebe';

// --- App Initialization ---
const app = initializeApp(firebaseConfig);
const auth = getAuth(app);
const db = getFirestore(app);

// --- Helper Functions ---
const formatCurrency = (value) => new Intl.NumberFormat('tr-TR', { style: 'currency', currency: 'TRY' }).format(value || 0);
const formatDate = (date) => {
    if (!date) return 'Geçersiz Tarih';
    const d = date instanceof Timestamp ? date.toDate() : new Date(date);
    return d.toLocaleDateString('tr-TR', { year: 'numeric', month: 'long', day: 'numeric' });
};
function numberToWordsTr(num) {
    if (num === null || num === undefined) return "";
    if (num === 0) return "Sıfır";
    const birler=["","Bir","İki","Üç","Dört","Beş","Altı","Yedi","Sekiz","Dokuz"],onlar=["","On","Yirmi","Otuz","Kırk","Elli","Altmış","Yetmiş","Seksen","Doksan"],binler=["","Bin","Milyon","Milyar"];
    const groupToWords=(n)=>{let y=Math.floor(n/100),o=Math.floor((n%100)/10),b=n%10,r="";if(y>0)r+=(y>1?birler[y]:"")+"Yüz ";if(o>0)r+=onlar[o]+" ";if(b>0)r+=birler[b]+" ";return r};let p=num.toString().split('.'),i=parseInt(p[0],10),f=p.length>1?parseInt(p[1].padEnd(2,'0').substring(0,2),10):0;let w="";if(i===0){w="Sıfır "}else{let j=0;while(i>0){let c=i%1000;if(c>0){let cw=groupToWords(c);if(j===1&&c===1)cw="";w=cw+binler[j]+" "+w}i=Math.floor(i/1000);j++}}let res=w.trim()+" Türk Lirası";if(f>0)res+=", "+groupToWords(f).trim()+" Kuruş";return res
}

// --- Main App Component ---
export default function App() {
    const [userId, setUserId] = useState(null);
    const [loading, setLoading] = useState(true);
    const [scriptsLoaded, setScriptsLoaded] = useState(false);
    const [currentPage, setCurrentPage] = useState('dashboard');
    const [data, setData] = useState({ invoices: [], expenses: [], customers: [], products: [], accounts: [], companyProfile: { companyName: "", address: "", bankAccounts: [] } });

    useEffect(() => {
        const loadScript = (src) => new Promise((res, rej) => {
            if(document.querySelector(`script[src="${src}"]`)) return res();
            const script = document.createElement('script');
            script.src = src; script.async = true;
            script.onload = res; script.onerror = rej;
            document.head.appendChild(script);
        });
        Promise.all([
            loadScript('https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js'),
            loadScript('https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js')
        ]).then(() => setScriptsLoaded(true)).catch(err => console.error("PDF libraries failed to load", err));
        
        const unsubAuth = onAuthStateChanged(auth, async (user) => {
            if (user) setUserId(user.uid);
            else {
                try {
                    if (typeof __initial_auth_token !== 'undefined') await signInWithCustomToken(auth, __initial_auth_token);
                    else await signInAnonymously(auth);
                } catch (error) { console.error("Authentication Error:", error); }
            }
        });
        return () => unsubAuth();
    }, []);

    useEffect(() => {
        if (!userId) return;
        setLoading(true);
        const collectionsToFetch = ['invoices', 'expenses', 'customers', 'products', 'accounts'];
        const unsubscribers = collectionsToFetch.map(colName => {
            const path = `artifacts/${appId}/users/${userId}/${colName}`;
            const q = query(collection(db, path));
            return onSnapshot(q, snap => {
                setData(prev => ({ ...prev, [colName]: snap.docs.map(d => ({ id: d.id, ...d.data() })) }));
            }, err => console.error(`Error fetching ${colName}:`, err));
        });
        const profileRef = doc(db, `artifacts/${appId}/users/${userId}/companyProfile`, 'main');
        const unsubProfile = onSnapshot(profileRef, async (docSnap) => {
            if (docSnap.exists()) setData(prev => ({ ...prev, companyProfile: docSnap.data() }));
        });
        unsubscribers.push(unsubProfile);
        setLoading(false);
        return () => unsubscribers.forEach(unsub => unsub());
    }, [userId]);

    if (loading || !userId) return <div className="flex items-center justify-center h-screen bg-slate-100"><div className="text-xl font-semibold">Yükleniyor...</div></div>;

    const renderPage = () => {
        const { invoices, expenses, customers, products, accounts, companyProfile } = data;
        switch (currentPage) {
            case 'invoices': return <Invoices invoices={invoices} userId={userId} customers={customers} products={products} companyProfile={companyProfile} scriptsLoaded={scriptsLoaded}/>;
            case 'customers': return <Customers customers={customers} userId={userId} />;
            case 'products': return <Products products={products} userId={userId} />;
            case 'expenses': return <Expenses expenses={expenses} userId={userId} accounts={accounts} />;
            case 'accounts': return <BankAccounts accounts={accounts} userId={userId} />;
            case 'reports': return <Reports invoices={invoices} expenses={expenses} />;
            case 'settings': return <SettingsPage userId={userId} companyProfile={companyProfile} />;
            default: return <Dashboard invoices={invoices} expenses={expenses} customers={customers} products={products} />;
        }
    };
    return (<div className="flex h-screen bg-slate-100 font-sans"><Sidebar currentPage={currentPage} setCurrentPage={setCurrentPage} userId={userId} /><main className="flex-1 p-4 sm:p-6 lg:p-8 overflow-y-auto">{renderPage()}</main></div>);
}

// Sidebar, Dashboard, StatCard... (These components remain the same)
const Sidebar = ({ currentPage, setCurrentPage, userId }) => { const navItems = [{ id: 'dashboard', label: 'Gösterge Paneli', icon: LayoutDashboard },{ id: 'invoices', label: 'Faturalar', icon: Receipt },{ id: 'expenses', label: 'Giderler', icon: ShoppingCart },{ id: 'customers', label: 'Cari Hesaplar', icon: Users },{ id: 'products', label: 'Ürün/Hizmetler', icon: Package },{ id: 'accounts', label: 'Kasa/Banka', icon: Landmark },{ id: 'reports', label: 'Raporlar', icon: BarChart3 },{ id: 'settings', label: 'Ayarlar', icon: Settings }]; return (<nav className="w-16 md:w-64 bg-slate-900 text-white flex flex-col no-print"><div className="flex items-center justify-center md:justify-start p-4 border-b border-slate-700"><span className="text-xl font-bold text-sky-400">S</span><h1 className="hidden md:block text-xl font-bold ml-2">SAGG Muhasebe</h1></div><ul className="flex-1 mt-4">{navItems.map(item => (<li key={item.id} className="my-1"><button onClick={() => setCurrentPage(item.id)} className={`flex items-center w-full p-4 text-sm md:text-base hover:bg-slate-700 ${currentPage===item.id?'bg-sky-600/30 border-l-4 border-sky-400 text-sky-300':'text-slate-300'}`}><item.icon className="h-6 w-6 md:mr-3"/><span className="hidden md:inline">{item.label}</span></button></li>))}</ul><div className="p-2 border-t border-slate-700 text-center"><p className="text-xs text-slate-400 break-words">Kullanıcı ID: {userId}</p></div></nav>); };
const Dashboard = ({ invoices, expenses, customers, products }) => { const { totalIncome, totalExpense } = useMemo(() => ({ totalIncome: (invoices || []).reduce((s, i) => s + i.grandTotal, 0), totalExpense: (expenses || []).reduce((s, e) => s + e.amount, 0), }), [invoices, expenses]); const chartData = [ { name: 'Gelir', Tutar: totalIncome }, { name: 'Gider', Tutar: totalExpense } ]; return (<div><h2 className="text-2xl font-bold text-slate-800 mb-6">Gösterge Paneli</h2><div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6"><StatCard title="Toplam Gelir" value={formatCurrency(totalIncome)} color="text-green-500" /><StatCard title="Toplam Gider" value={formatCurrency(totalExpense)} color="text-red-500" /><StatCard title="Toplam Cari" value={(customers || []).length} color="text-blue-500" /><StatCard title="Ürün/Hizmet Sayısı" value={(products || []).length} color="text-purple-500" /></div><div className="mt-8 bg-white p-6 rounded-lg shadow-md"><h3 className="text-lg font-semibold text-slate-700 mb-4">Gelir & Gider Analizi</h3><ResponsiveContainer width="100%" height={300}><BarChart data={chartData} margin={{ top: 5, right: 20, left: 30, bottom: 5 }}><CartesianGrid strokeDasharray="3 3" /><XAxis dataKey="name" /><YAxis tickFormatter={(v) => `${(v/1000).toFixed(0)}k`}/><Tooltip formatter={(v) => formatCurrency(v)} /><Legend /><Bar dataKey="Tutar" fill="#38bdf8" /></BarChart></ResponsiveContainer></div></div>); };
const StatCard = ({ title, value, color }) => (<div className="bg-white p-6 rounded-lg shadow-md"><h4 className="text-sm font-semibold text-slate-500">{title}</h4><p className={`text-3xl font-bold mt-2 ${color}`}>{value}</p></div>);

const Invoices = ({ invoices, userId, customers, products, companyProfile, scriptsLoaded }) => {
    const [modalOpen, setModalOpen] = useState(false);
    const [editingInvoice, setEditingInvoice] = useState(null);
    const [viewingInvoice, setViewingInvoice] = useState(null);
    const [invoiceForPdf, setInvoiceForPdf] = useState(null);
    const [activeActionMenu, setActiveActionMenu] = useState(null);
    const menuRef = useRef(null);
    const printRef = useRef(null);

    const handleEdit = (invoice) => { setEditingInvoice(invoice); setModalOpen(true); setActiveActionMenu(null); };
    const handleAddNew = () => { setEditingInvoice(null); setModalOpen(true); };
    const handleShare = (invoice) => {
        if (!scriptsLoaded) { alert("Paylaşım için gerekli kütüphaneler yükleniyor, lütfen birkaç saniye sonra tekrar deneyin."); return; }
        setInvoiceForPdf(invoice);
        setActiveActionMenu(null);
    };
    
    useEffect(() => {
        if (invoiceForPdf && printRef.current) {
            const generateAndShare = async () => {
                try {
                    const { jsPDF } = window.jspdf;
                    const canvas = await window.html2canvas(printRef.current, { scale: 2 });
                    const imgData = canvas.toDataURL('image/png');
                    const pdf = new jsPDF({ orientation: 'p', unit: 'mm', format: 'a4' });
                    const pdfWidth = pdf.internal.pageSize.getWidth();
                    const pdfHeight = pdf.internal.pageSize.getHeight();
                    const imgWidth = canvas.width; const imgHeight = canvas.height;
                    const ratio = Math.min(pdfWidth / imgWidth, pdfHeight / imgHeight);
                    const imgX = (pdfWidth - imgWidth * ratio) / 2;
                    pdf.addImage(imgData, 'PNG', imgX, 0, imgWidth * ratio, imgHeight * ratio);
                    const pdfBlob = pdf.output('blob');
                    const file = new File([pdfBlob], `fatura-${invoiceForPdf.invoiceNumber}.pdf`, { type: 'application/pdf' });

                    if (navigator.share && navigator.canShare({ files: [file] })) {
                        await navigator.share({ files: [file], title: `Fatura: ${invoiceForPdf.invoiceNumber}`, text: `SAGG Muhasebe Faturası` });
                    } else {
                        const link = document.createElement('a');
                        link.href = URL.createObjectURL(file);
                        link.download = `fatura-${invoiceForPdf.invoiceNumber}.pdf`;
                        link.click();
                        URL.revokeObjectURL(link.href);
                        alert("Tarayıcınız paylaşımı desteklemiyor. Fatura PDF olarak indirildi.");
                    }
                } catch (err) { alert('Fatura PDF olarak oluşturulurken bir hata oluştu.'); console.error(err); } 
                finally { setInvoiceForPdf(null); }
            };
            generateAndShare();
        }
    }, [invoiceForPdf]);

    useEffect(() => {
        const handleClickOutside = (e) => { if (menuRef.current && !menuRef.current.contains(e.target)) setActiveActionMenu(null); };
        document.addEventListener("mousedown", handleClickOutside);
        return () => document.removeEventListener("mousedown", handleClickOutside);
    }, []);

    return (
        <div>
            <div className="flex justify-between items-center mb-6"><h2 className="text-2xl font-bold text-slate-800">Faturalar</h2><button onClick={handleAddNew} className="flex items-center bg-sky-500 text-white px-4 py-2 rounded-lg shadow hover:bg-sky-600"><PlusCircle className="h-5 w-5 mr-2"/>Yeni Fatura Oluştur</button></div>
            <div className="bg-white p-4 rounded-lg shadow-md"><div className="overflow-x-auto"><table className="w-full text-left"><thead><tr className="border-b"><th className="p-3">Fatura No</th><th className="p-3">Müşteri</th><th className="p-3">Tarih</th><th className="p-3">Tutar</th><th className="p-3 text-center">İşlemler</th></tr></thead><tbody>{(invoices || []).map(inv => (<tr key={inv.id} className="border-b hover:bg-slate-100 cursor-pointer" onClick={() => setViewingInvoice(inv)}><td className="p-3">{inv.invoiceNumber}</td><td className="p-3">{inv.customerSnapshot?.name}</td><td className="p-3">{formatDate(inv.date)}</td><td className="p-3 font-semibold">{formatCurrency(inv.grandTotal)}</td><td className="p-3 text-center relative"><button onClick={(e) => { e.stopPropagation(); setActiveActionMenu(inv.id === activeActionMenu ? null : inv.id);}} className="p-2 rounded-full hover:bg-slate-200"><MoreVertical size={20}/></button>{activeActionMenu === inv.id && (<div ref={menuRef} className="absolute right-0 mt-2 w-48 bg-white rounded-md shadow-lg z-20 text-left"><div className="py-1"><a href="#" onClick={(e) => {e.stopPropagation(); handleEdit(inv)}} className="flex items-center w-full px-4 py-2 text-sm text-gray-700 hover:bg-gray-100"><Edit size={16} className="mr-3"/>Düzenle</a><a href="#" onClick={(e) => {e.stopPropagation(); handleShare(inv)}} className="flex items-center w-full px-4 py-2 text-sm text-gray-700 hover:bg-gray-100"><Send size={16} className="mr-3"/>Gönder/Paylaş</a></div></div>)}</td></tr>))}</tbody></table></div></div>
            {(modalOpen || editingInvoice) && <InvoiceModal setShowModal={setModalOpen} userId={userId} customers={customers} products={products} editingInvoice={editingInvoice} setEditingInvoice={setEditingInvoice}/>}
            {viewingInvoice && <InvoicePrintView invoice={viewingInvoice} onClose={() => setViewingInvoice(null)} companyProfile={companyProfile}/>}
            {invoiceForPdf && <div className="fixed left-[-9999px] top-0"><InvoicePrintView ref={printRef} invoice={invoiceForPdf} companyProfile={companyProfile} /></div>}
        </div>
    );
};

const InvoiceModal = ({ setShowModal, userId, customers, products, editingInvoice, setEditingInvoice }) => { /* ... (same as before) ... */ const [form, setForm] = useState({ customerId: '', invoiceNumber: '', date: new Date().toISOString().split('T')[0], items: [{ productId: '', description: '', quantity: 1, unitPrice: 0 }], kdvRate: 20 }); useEffect(() => { if (editingInvoice) { const date = editingInvoice.date?.toDate ? editingInvoice.date.toDate() : new Date(); setForm({ ...editingInvoice, date: date.toISOString().split('T')[0] }); } }, [editingInvoice]); const handleChange = (e) => setForm({ ...form, [e.target.name]: e.target.value }); const handleItemChange = (index, field, value) => { const newItems = [...form.items]; newItems[index][field] = value; if (field === 'productId' && value) { const product = products.find(p => p.id === value); if (product) { newItems[index].description = product.name; newItems[index].unitPrice = product.price; } } setForm({...form, items: newItems}); }; const addItem = () => setForm({...form, items: [...form.items, { productId: '', description: '', quantity: 1, unitPrice: 0 }]}); const removeItem = (index) => setForm({...form, items: form.items.filter((_, i) => i !== index)}); const subTotal = useMemo(() => form.items.reduce((s, i) => s + (i.quantity * i.unitPrice || 0), 0), [form.items]); const kdvAmount = useMemo(() => subTotal * (form.kdvRate / 100), [subTotal, form.kdvRate]); const grandTotal = useMemo(() => subTotal + kdvAmount, [subTotal, kdvAmount]); const handleSubmit = async (e) => { e.preventDefault(); const selectedCustomer = customers.find(c => c.id === form.customerId); if (!selectedCustomer || !form.invoiceNumber) { alert("Lütfen müşteri ve fatura numarası girin."); return; } const dataToSave = { ...form, date: Timestamp.fromDate(new Date(form.date)), customerSnapshot: selectedCustomer, subTotal, kdvAmount, grandTotal }; try { if (editingInvoice) { const docRef = doc(db, `artifacts/${appId}/users/${userId}/invoices`, editingInvoice.id); await updateDoc(docRef, dataToSave); } else { await addDoc(collection(db, `artifacts/${appId}/users/${userId}/invoices`), dataToSave); } setShowModal(false); setEditingInvoice(null); } catch (error) { console.error("Fatura kaydedilirken hata:", error); } }; return (<div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4"><div className="bg-white rounded-lg shadow-xl w-full max-w-3xl max-h-[90vh] overflow-y-auto"><form onSubmit={handleSubmit}><div className="p-6 border-b flex justify-between items-center"><h3 className="text-xl font-semibold text-slate-800">{editingInvoice?'Fatura Düzenle':'Yeni Fatura'}</h3><button type="button" onClick={()=>{setShowModal(false); setEditingInvoice(null)}} className="text-slate-500 hover:text-slate-800"><X/></button></div><div className="p-6"><div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4"><select name="customerId" value={form.customerId} onChange={handleChange} className="p-2 border rounded bg-white" required><option value="" disabled>Müşteri Seçin</option>{customers.map(c => <option key={c.id} value={c.id}>{c.name}</option>)}</select><input type="text" name="invoiceNumber" placeholder="Fatura Numarası" value={form.invoiceNumber} onChange={handleChange} className="p-2 border rounded" required /><input type="date" name="date" value={form.date} onChange={handleChange} className="p-2 border rounded" required /><select name="kdvRate" value={form.kdvRate} onChange={handleChange} className="p-2 border rounded bg-white"><option value="1">KDV %1</option><option value="10">KDV %10</option><option value="20">KDV %20</option></select></div><h4 className="font-semibold mt-6 mb-2">Fatura Kalemleri</h4>{form.items.map((item, index) => (<div key={index} className="grid grid-cols-12 gap-2 mb-2 items-center"><select value={item.productId} onChange={e => handleItemChange(index, 'productId', e.target.value)} className="col-span-4 p-2 border rounded bg-white"><option value="">Ürün/Hizmet Seç</option>{products.map(p => <option key={p.id} value={p.id}>{p.name}</option>)}</select><input type="number" placeholder="Miktar" value={item.quantity} onChange={e => handleItemChange(index, 'quantity', Number(e.target.value))} className="col-span-2 p-2 border rounded" required /><input type="number" step="0.01" placeholder="Birim Fiyat" value={item.unitPrice} onChange={e => handleItemChange(index, 'unitPrice', Number(e.target.value))} className="col-span-3 p-2 border rounded" required /><span className="col-span-2 p-2 text-right">{formatCurrency(item.quantity * item.unitPrice)}</span><button type="button" onClick={() => removeItem(index)} className="col-span-1 text-red-500 hover:text-red-700"><X size={18}/></button></div>))}<button type="button" onClick={addItem} className="text-sm text-sky-600 hover:text-sky-800 mt-2">+ Kalem Ekle</button><div className="mt-6 border-t pt-4 text-right"><p className="text-slate-600">Ara Toplam: <span className="font-semibold">{formatCurrency(subTotal)}</span></p><p className="text-slate-600">KDV (%{form.kdvRate}): <span className="font-semibold">{formatCurrency(kdvAmount)}</span></p><p className="text-xl font-bold text-slate-800 mt-2">Genel Toplam: <span className="font-semibold">{formatCurrency(grandTotal)}</span></p></div></div><div className="p-4 bg-slate-50 border-t flex justify-end"><button type="button" onClick={()=>{setShowModal(false);setEditingInvoice(null)}} className="px-4 py-2 mr-2 bg-slate-200 rounded hover:bg-slate-300">İptal</button><button type="submit" className="px-4 py-2 bg-sky-500 text-white rounded hover:bg-sky-600">Kaydet</button></div></form></div></div>);};

const InvoicePrintView = forwardRef(({ invoice, onClose, companyProfile }, ref) => { const printStyles = `@media print{body *{visibility:hidden}#invoice-print-area,#invoice-print-area *{visibility:visible}#invoice-print-area{position:absolute;left:0;top:0;width:100%}.no-print{display:none}}`; const handlePrint = () => window.print(); const { customerSnapshot } = invoice; return (<div className="fixed inset-0 bg-black bg-opacity-70 flex justify-center items-start z-50 p-4 overflow-y-auto no-print"><style>{printStyles}</style><div className="bg-white w-full max-w-4xl shadow-2xl my-8"><div id="invoice-print-area" ref={ref} className="p-10 bg-white"><header className="flex justify-between items-start pb-6 border-b"><div><h1 className="text-3xl font-bold text-slate-800">{companyProfile?.companyName || "Şirket Adınız"}</h1><p className="text-slate-500 mt-2 max-w-xs">{companyProfile?.address || "Şirket Adresiniz"}</p></div><div className="text-right"><h2 className="text-4xl font-bold uppercase text-slate-400">Fatura</h2><p className="text-slate-500 mt-2">No: {invoice.invoiceNumber}</p></div></header><section className="flex justify-between mt-8"><div><h3 className="font-semibold text-slate-500 uppercase">Fatura Sahibi</h3><p className="font-bold text-slate-700 mt-1">{customerSnapshot?.name}</p><p className="text-slate-600 max-w-xs">{customerSnapshot?.address}</p>{customerSnapshot?.accountType === 'Tüzel Kişi' && (<><p className="text-slate-600">Vergi Dairesi: {customerSnapshot?.taxOffice}</p><p className="text-slate-600">VKN: {customerSnapshot?.taxId}</p></>)}{customerSnapshot?.accountType === 'Şahıs' && (<p className="text-slate-600">TCKN: {customerSnapshot?.tcNo}</p>)}</div><div className="text-right"><h3 className="font-semibold text-slate-500">Fatura Tarihi:</h3><p className="text-slate-600">{formatDate(invoice.date)}</p></div></section><section className="mt-8"><table className="w-full text-left"><thead className="bg-slate-100"><tr><th className="p-3 font-semibold uppercase text-slate-600">Açıklama</th><th className="p-3 font-semibold uppercase text-slate-600 text-right">Miktar</th><th className="p-3 font-semibold uppercase text-slate-600 text-right">Birim Fiyat</th><th className="p-3 font-semibold uppercase text-slate-600 text-right">Toplam</th></tr></thead><tbody>{invoice.items.map((item, i) => (<tr key={i} className="border-b"><td className="p-3">{item.description}</td><td className="p-3 text-right">{item.quantity}</td><td className="p-3 text-right">{formatCurrency(item.unitPrice)}</td><td className="p-3 text-right">{formatCurrency(item.quantity * item.unitPrice)}</td></tr>))}</tbody></table></section><section className="flex justify-end mt-8"><div className="w-full max-w-sm"><div className="flex justify-between text-slate-600"><p>Ara Toplam:</p><p>{formatCurrency(invoice.subTotal)}</p></div><div className="flex justify-between text-slate-600 mt-2"><p>KDV (%{invoice.kdvRate}):</p><p>{formatCurrency(invoice.kdvAmount)}</p></div><div className="flex justify-between font-bold text-xl text-slate-800 mt-4 border-t pt-2"><p>Genel Toplam:</p><p>{formatCurrency(invoice.grandTotal)}</p></div></div></section><section className="mt-8 border-t pt-4"><p className="text-xs text-slate-500">Yalnız: {numberToWordsTr(invoice.grandTotal)}</p></section><footer className="mt-10 border-t pt-4"><h3 className="font-semibold text-slate-500 uppercase mb-2">Banka Bilgileri</h3>{(companyProfile?.bankAccounts || []).map((acc,i)=>(<div key={i} className="text-sm text-slate-600"><p><span className="font-semibold">{acc.bankName}:</span> {acc.iban}</p></div>))}</footer></div><div className="p-4 bg-slate-50 flex justify-end space-x-2 no-print"><button onClick={onClose} className="px-4 py-2 bg-slate-300 text-slate-800 rounded hover:bg-slate-400">Kapat</button><button onClick={handlePrint} className="flex items-center px-4 py-2 bg-sky-500 text-white rounded hover:bg-sky-600"><Printer size={16} className="mr-2"/> Yazdır</button></div></div></div>); });
InvoicePrintView.displayName = 'InvoicePrintView';

// --- Other components (Customers, Products, Expenses, etc.) ---
const FormModal = ({ title, children, onSubmit, setShowModal }) => ( <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4"><div className="bg-white rounded-lg shadow-xl w-full max-w-lg"><form onSubmit={onSubmit}><div className="p-6 border-b"><div className="flex justify-between items-center"><h3 className="text-xl font-semibold text-slate-800">{title}</h3><button type="button" onClick={() => setShowModal(false)} className="text-slate-500 hover:text-slate-800"><X /></button></div></div><div className="p-6">{children}</div><div className="p-4 bg-slate-50 border-t flex justify-end"><button type="button" onClick={() => setShowModal(false)} className="px-4 py-2 mr-2 bg-slate-200 rounded hover:bg-slate-300">İptal</button><button type="submit" className="px-4 py-2 bg-sky-500 text-white rounded hover:bg-sky-600">Kaydet</button></div></form></div></div>);
const Customers = ({ customers, userId }) => { const [showModal, setShowModal] = useState(false); return (<div><div className="flex justify-between items-center mb-6"><h2 className="text-2xl font-bold text-slate-800">Cari Hesaplar</h2><button onClick={() => setShowModal(true)} className="flex items-center bg-sky-500 text-white px-4 py-2 rounded-lg shadow hover:bg-sky-600 transition-colors"><PlusCircle className="h-5 w-5 mr-2" />Yeni Cari Ekle</button></div><div className="bg-white p-4 rounded-lg shadow-md"><div className="overflow-x-auto"><table className="w-full text-left"><thead><tr className="border-b"><th className="p-3">Adı</th><th className="p-3">Tipi</th><th className="p-3">Vergi/TCKN No</th><th className="p-3">Email</th></tr></thead><tbody>{(customers || []).map(c => (<tr key={c.id} className="border-b hover:bg-slate-50"><td className="p-3">{c.name}</td><td className="p-3">{c.accountType}</td><td className="p-3">{c.taxId || c.tcNo}</td><td className="p-3">{c.email}</td></tr>))}</tbody></table></div></div>{showModal && <CustomerModal setShowModal={setShowModal} userId={userId} />}</div>); };
const CustomerModal = ({ setShowModal, userId }) => { const [form, setForm] = useState({ name: '', email: '', phone: '', address: '', accountType: 'Tüzel Kişi', taxOffice: '', taxId: '', tcNo: '' }); const handleChange = e => setForm({ ...form, [e.target.name]: e.target.value }); const handleSubmit = async (e) => { e.preventDefault(); if(!form.name) return; try { await addDoc(collection(db, `artifacts/${appId}/users/${userId}/customers`), form); setShowModal(false); } catch (error) { console.error("Error creating customer:", error); } }; return (<div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4"><div className="bg-white rounded-lg shadow-xl w-full max-w-2xl"><form onSubmit={handleSubmit}><div className="p-6 border-b"><div className="flex justify-between items-center"><h3 className="text-xl font-semibold text-slate-800">Yeni Cari Hesap Ekle</h3><button type="button" onClick={() => setShowModal(false)} className="text-slate-500 hover:text-slate-800"><X /></button></div></div><div className="p-6 grid grid-cols-1 md:grid-cols-2 gap-4"><input type="text" name="name" placeholder="Adı Soyadı / Firma Adı" value={form.name} onChange={handleChange} className="p-2 border rounded md:col-span-2" required /><select name="accountType" value={form.accountType} onChange={handleChange} className="p-2 border rounded bg-white"><option value="Tüzel Kişi">Tüzel Kişi</option><option value="Şahıs">Şahıs</option></select><div></div>{form.accountType === 'Tüzel Kişi' ? (<><input type="text" name="taxOffice" placeholder="Vergi Dairesi" value={form.taxOffice} onChange={handleChange} className="p-2 border rounded" /><input type="text" name="taxId" placeholder="Vergi Kimlik No (VKN)" value={form.taxId} onChange={handleChange} className="p-2 border rounded" /></>) : (<><input type="text" name="tcNo" placeholder="T.C. Kimlik No" value={form.tcNo} onChange={handleChange} className="p-2 border rounded md:col-span-2" /></>)}<input type="email" name="email" placeholder="E-posta" value={form.email} onChange={handleChange} className="p-2 border rounded" /><input type="tel" name="phone" placeholder="Telefon" value={form.phone} onChange={handleChange} className="p-2 border rounded" /><textarea name="address" placeholder="Adres" value={form.address} onChange={handleChange} className="p-2 border rounded md:col-span-2 h-24" required></textarea></div><div className="p-4 bg-slate-50 border-t flex justify-end"><button type="button" onClick={() => setShowModal(false)} className="px-4 py-2 mr-2 bg-slate-200 rounded hover:bg-slate-300">İptal</button><button type="submit" className="px-4 py-2 bg-sky-500 text-white rounded hover:bg-sky-600">Kaydet</button></div></form></div></div>); };
const Expenses = ({ expenses, userId, accounts }) => { const [showModal, setShowModal] = useState(false); return (<div><div className="flex justify-between items-center mb-6"><h2 className="text-2xl font-bold text-slate-800">Giderler</h2><button onClick={() => setShowModal(true)} className="flex items-center bg-sky-500 text-white px-4 py-2 rounded-lg shadow hover:bg-sky-600 transition-colors"><PlusCircle className="h-5 w-5 mr-2" />Yeni Gider Ekle</button></div><div className="bg-white p-4 rounded-lg shadow-md"><div className="overflow-x-auto"><table className="w-full text-left"><thead><tr className="border-b"><th className="p-3">Tarih</th><th className="p-3">Kategori</th><th className="p-3">Açıklama</th><th className="p-3">Ödenen Hesap</th><th className="p-3">Tutar</th></tr></thead><tbody>{(expenses || []).map(exp => (<tr key={exp.id} className="border-b hover:bg-slate-50"><td className="p-3">{formatDate(exp.date)}</td><td className="p-3">{exp.category}</td><td className="p-3">{exp.description}</td><td className="p-3">{exp.accountName || '-'}</td><td className="p-3 font-semibold">{formatCurrency(exp.amount)}</td></tr>))}</tbody></table></div></div>{showModal && <ExpenseModal setShowModal={setShowModal} userId={userId} accounts={accounts} />}</div>); };
const ExpenseModal = ({ setShowModal, userId, accounts }) => { const [form, setForm] = useState({ date: new Date().toISOString().split('T')[0], category: 'Ofis Malzemeleri', description: '', amount: '', kdvRate: 20, accountId: '' }); const handleChange = e => setForm({ ...form, [e.target.name]: e.target.value }); const handleSubmit = async (e) => { e.preventDefault(); if (!form.description || form.amount <= 0) return; const selectedAccount = accounts.find(a => a.id === form.accountId); const dataToSave = { ...form, amount: Number(form.amount), date: Timestamp.fromDate(new Date(form.date)), accountName: selectedAccount?.name || null }; try { await addDoc(collection(db, `artifacts/${appId}/users/${userId}/expenses`), dataToSave); setShowModal(false); } catch (error) { console.error("Error creating expense:", error); } }; return (<FormModal title="Yeni Gider Ekle" onSubmit={handleSubmit} setShowModal={setShowModal}><div className="grid grid-cols-1 gap-4"><input name="date" type="date" value={form.date} onChange={handleChange} className="p-2 border rounded" required /><select name="category" value={form.category} onChange={handleChange} className="p-2 border rounded bg-white"><option>Ofis Malzemeleri</option><option>Personel</option><option>Kira</option><option>Pazarlama</option><option>Diğer</option></select><select name="kdvRate" value={form.kdvRate} onChange={handleChange} className="p-2 border rounded bg-white"><option value="1">KDV %1 Dahil</option><option value="10">KDV %10 Dahil</option><option value="20">KDV %20 Dahil</option></select><select name="accountId" value={form.accountId} onChange={handleChange} className="p-2 border rounded bg-white"><option value="">Hesap Seç (Opsiyonel)</option>{(accounts || []).map(acc => <option key={acc.id} value={acc.id}>{acc.name}</option>)}</select><input name="description" type="text" placeholder="Açıklama" value={form.description} onChange={handleChange} className="p-2 border rounded" required /><input name="amount" type="number" step="0.01" placeholder="Toplam Tutar (KDV Dahil)" value={form.amount} onChange={handleChange} className="p-2 border rounded" required /></div></FormModal>); };
const Products = ({ products, userId }) => { const [showModal, setShowModal] = useState(false); return (<div><div className="flex justify-between items-center mb-6"><h2 className="text-2xl font-bold text-slate-800">Ürün ve Hizmetler</h2><button onClick={() => setShowModal(true)} className="flex items-center bg-sky-500 text-white px-4 py-2 rounded-lg shadow hover:bg-sky-600 transition-colors"><PlusCircle className="h-5 w-5 mr-2" />Yeni Ekle</button></div><div className="bg-white p-4 rounded-lg shadow-md"><div className="overflow-x-auto"><table className="w-full text-left"><thead><tr className="border-b"><th className="p-3">Stok Kodu</th><th className="p-3">Adı</th><th className="p-3">Satış Fiyatı</th></tr></thead><tbody>{(products || []).map(p => (<tr key={p.id} className="border-b hover:bg-slate-50"><td className="p-3">{p.code}</td><td className="p-3">{p.name}</td><td className="p-3 font-semibold">{formatCurrency(p.price)}</td></tr>))}</tbody></table></div></div>{showModal && <ProductModal setShowModal={setShowModal} userId={userId} />}</div>); };
const ProductModal = ({ setShowModal, userId }) => { const [form, setForm] = useState({ name: '', price: '', code: '' }); const handleChange = e => setForm({ ...form, [e.target.name]: e.target.value }); const handleSubmit = async (e) => { e.preventDefault(); if(!form.name || form.price <= 0) return; try { await addDoc(collection(db, `artifacts/${appId}/users/${userId}/products`), { ...form, price: Number(form.price) }); setShowModal(false); } catch (error) { console.error("Error creating product:", error); } }; return (<FormModal title="Yeni Ürün/Hizmet Ekle" onSubmit={handleSubmit} setShowModal={setShowModal}><div className="grid grid-cols-1 gap-4"><input name="name" type="text" placeholder="Ürün/Hizmet Adı" value={form.name} onChange={handleChange} className="p-2 border rounded" required /><input name="code" type="text" placeholder="Stok Kodu (Opsiyonel)" value={form.code} onChange={handleChange} className="p-2 border rounded" /><input name="price" type="number" step="0.01" placeholder="Birim Satış Fiyatı (KDV Hariç)" value={form.price} onChange={handleChange} className="p-2 border rounded" required /></div></FormModal>); };
const BankAccounts = ({ accounts, userId }) => { const [showModal, setShowModal] = useState(false); return (<div><div className="flex justify-between items-center mb-6"><h2 className="text-2xl font-bold text-slate-800">Kasa ve Banka Hesapları</h2><button onClick={() => setShowModal(true)} className="flex items-center bg-sky-500 text-white px-4 py-2 rounded-lg shadow hover:bg-sky-600 transition-colors"><PlusCircle className="h-5 w-5 mr-2" />Yeni Ekle</button></div><div className="bg-white p-4 rounded-lg shadow-md"><div className="overflow-x-auto"><table className="w-full text-left"><thead><tr className="border-b"><th className="p-3">Hesap Adı</th><th className="p-3">Türü</th><th className="p-3">IBAN</th><th className="p-3">Bakiye</th></tr></thead><tbody>{(accounts || []).map(a => (<tr key={a.id} className="border-b hover:bg-slate-50"><td className="p-3">{a.name}</td><td className="p-3">{a.type}</td><td className="p-3">{a.iban}</td><td className="p-3 font-semibold">{formatCurrency(a.balance)}</td></tr>))}</tbody></table></div></div>{showModal && <BankAccountModal setShowModal={setShowModal} userId={userId} />}</div>); };
const BankAccountModal = ({ setShowModal, userId }) => { const [form, setForm] = useState({ name: '', type: 'Banka', iban: '', balance: 0 }); const handleChange = e => setForm({ ...form, [e.target.name]: e.target.value }); const handleSubmit = async (e) => { e.preventDefault(); if(!form.name) return; try { await addDoc(collection(db, `artifacts/${appId}/users/${userId}/accounts`), form); setShowModal(false); } catch (error) { console.error("Error creating account:", error); } }; return (<FormModal title="Yeni Kasa/Banka Hesabı Ekle" onSubmit={handleSubmit} setShowModal={setShowModal}><div className="grid grid-cols-1 gap-4"><input name="name" type="text" placeholder="Hesap Adı (örn: İş Bankası Maaş)" value={form.name} onChange={handleChange} className="p-2 border rounded" required /><select name="type" value={form.type} onChange={handleChange} className="p-2 border rounded bg-white"><option>Banka</option><option>Nakit Kasa</option></select><input name="iban" type="text" placeholder="IBAN (Banka ise)" value={form.iban} onChange={handleChange} className="p-2 border rounded" /></div></FormModal>); };
const Reports = ({ invoices, expenses }) => { const { kdvFromSales, kdvFromExpenses, kdvPayable } = useMemo(() => { const kdvFromSales = (invoices || []).reduce((s, i) => s + (i.kdvAmount || 0), 0); const kdvFromExpenses = (expenses || []).reduce((s, e) => s + (e.amount * e.kdvRate / (100 + e.kdvRate) || 0), 0); return { kdvFromSales, kdvFromExpenses, kdvPayable: kdvFromSales - kdvFromExpenses }; }, [invoices, expenses]); return (<div><h2 className="text-2xl font-bold text-slate-800 mb-6">KDV Raporu</h2><div className="bg-white p-6 rounded-lg shadow-md"><div className="space-y-4"><div className="flex justify-between items-center p-4 bg-green-50 rounded-lg"><span className="font-semibold text-green-800">Hesaplanan KDV (Faturalardan)</span><span className="font-bold text-lg text-green-600">{formatCurrency(kdvFromSales)}</span></div><div className="flex justify-between items-center p-4 bg-red-50 rounded-lg"><span className="font-semibold text-red-800">İndirilecek KDV (Giderlerden)</span><span className="font-bold text-lg text-red-600">{formatCurrency(kdvFromExpenses)}</span></div><div className="flex justify-between items-center p-4 bg-sky-50 rounded-lg mt-4 border-t-2 border-sky-200"><span className="font-semibold text-xl text-sky-800">Ödenecek KDV</span><span className="font-bold text-2xl text-sky-600">{formatCurrency(kdvPayable)}</span></div><p className="text-xs text-slate-500 mt-4">* Bu rapor yalnızca bilgilendirme amaçlıdır. Lütfen nihai beyanlarınız için mali müşavirinize danışın.</p></div></div></div>); };
const SettingsPage = ({ userId, companyProfile }) => { const [profile, setProfile] = useState({ companyName: '', address: '', bankAccounts: [{ bankName: '', iban: '' }] }); useEffect(() => { if (companyProfile) setProfile(prev => ({ ...prev, ...companyProfile })); }, [companyProfile]); const handleChange = (e) => setProfile({ ...profile, [e.target.name]: e.target.value }); const handleBankChange = (index, e) => { const newBankAccounts = [...(profile.bankAccounts || [])]; newBankAccounts[index][e.target.name] = e.target.value; setProfile({ ...profile, bankAccounts: newBankAccounts }); }; const addBankAccount = () => setProfile({ ...profile, bankAccounts: [...(profile.bankAccounts || []), { bankName: '', iban: '' }] }); const removeBankAccount = (index) => setProfile({ ...profile, bankAccounts: (profile.bankAccounts || []).filter((_, i) => i !== index) }); const handleSave = async () => { const docRef = doc(db, `artifacts/${appId}/users/${userId}/companyProfile`, 'main'); try { await setDoc(docRef, profile, { merge: true }); alert("Bilgiler kaydedildi!"); } catch (error) { console.error("Profil kaydedilirken hata oluştu: ", error); } }; return (<div><h2 className="text-2xl font-bold text-slate-800 mb-6">Ayarlar</h2><div className="bg-white p-6 rounded-lg shadow-md"><h3 className="text-lg font-semibold text-slate-700">Şirket Bilgileri</h3><div className="grid grid-cols-1 md:grid-cols-2 gap-4 mt-4"><input type="text" name="companyName" value={profile.companyName || ''} onChange={handleChange} placeholder="Şirketinizin Resmi Adı" className="p-2 border rounded"/><textarea name="address" value={profile.address || ''} onChange={handleChange} placeholder="Şirket Adresi" className="p-2 border rounded md:col-span-2 h-20"/></div><h3 className="text-lg font-semibold text-slate-700 mt-6 border-t pt-6">Banka Bilgileri</h3>{(profile.bankAccounts || []).map((acc, index) => (<div key={index} className="grid grid-cols-1 md:grid-cols-6 gap-4 mt-4 items-center"><input type="text" name="bankName" value={acc.bankName} onChange={(e) => handleBankChange(index, e)} placeholder="Banka Adı" className="p-2 border rounded md:col-span-2"/><input type="text" name="iban" value={acc.iban} onChange={(e) => handleBankChange(index, e)} placeholder="IBAN" className="p-2 border rounded md:col-span-3"/><button onClick={() => removeBankAccount(index)} className="text-red-500 hover:text-red-700"><X size={20}/></button></div>))}<button onClick={addBankAccount} className="text-sm text-sky-600 hover:text-sky-800 mt-2">+ Yeni Banka Hesabı Ekle</button><div className="mt-8 border-t pt-6 flex justify-end"><button onClick={handleSave} className="px-6 py-2 bg-sky-600 text-white rounded shadow hover:bg-sky-700">Kaydet</button></div></div></div>); };
const SimpleModal = ({ title, children, onClose }) => (<div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4"><div className="bg-white rounded-lg shadow-xl w-full max-w-lg"><div className="p-6 border-b"><div className="flex justify-between items-center"><h3 className="text-xl font-semibold text-slate-800">{title}</h3><button onClick={onClose} className="text-slate-500 hover:text-slate-800"><X/></button></div></div><div className="p-6">{children}</div><div className="p-4 bg-slate-50 border-t flex justify-end"><button onClick={onClose} className="px-4 py-2 bg-slate-300 rounded hover:bg-slate-400">Kapat</button></div></div></div>);
